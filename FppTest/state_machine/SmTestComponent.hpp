// ======================================================================
// \title  SmTestComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for SmTest component base class
// ======================================================================

#ifndef FppTest_SmTestComponentAc_HPP
#define FppTest_SmTestComponentAc_HPP

#include "FpConfig.hpp"
#include "FppTest/state_machine/SMEventsSerializableAc.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Types/InternalInterfaceString.hpp"
#include "Svc/Sched/SchedPortAc.hpp"
#include "FppTest/state_machine/DeviceSm.h"

namespace FppTest {

   namespace StateMachine {
        typedef enum {
            DEVICE1,
            DEVICE2,
        } SmId;                           
    };

  //! \class SmTestComponentBase
  //! \brief Auto-generated base for SmTest component
  //!
  //! A component for testing data product code gen
  class SmTestComponentBase :
    public Fw::ActiveComponentBase, public DeviceSmIf
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class for white-box testing
      friend class SmTestComponentBaseFriend;

    PROTECTED:

      // Instantiate the state machines
      DeviceSm device1;
      DeviceSm device2;

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_SCHEDIN_INPUT_PORTS = 1,
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize SmTestComponentBase object
      void init(
          FwQueueSizeType queueDepth, //!< The queue depth
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return schedIn[portNum]
      Svc::InputSchedPort* get_schedIn_InputPort(
          FwIndexType portNum //!< The port number
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct SmTestComponentBase object
      SmTestComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy SmTestComponentBase object
      virtual ~SmTestComponentBase();

    PROTECTED:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of schedIn input ports
      //!
      //! \return The number of schedIn input ports
      FwIndexType getNum_schedIn_InputPorts() const;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port schedIn
      virtual void schedIn_handler(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      ) = 0;

    PROTECTED:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port schedIn
      void schedIn_handlerBase(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Pre-message hooks for typed async input ports
      //
      // Each of these functions is invoked just before processing a message
      // on the corresponding port. By default, they do nothing. You can
      // override them to provide specific pre-message behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for async input port schedIn
      virtual void schedIn_preMsgHook(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    PROTECTED:

      // ----------------------------------------------------------------------
      // Internal interface base-class functions
      // ---------------------------------------------------------------------
      //! Internal interface base-class function for sendEvents

      void sendEvents_internalInterfaceInvoke(const Svc::SMEvents& ev);

      // ----------------------------------------------------------------------
      // Internal interface handlers
      // ----------------------------------------------------------------------

      //! Internal interface handler for sendEvents
      void sendEvents_internalInterfaceHandler(const Svc::SMEvents& ev);

    PROTECTED:


    PRIVATE:

      // ----------------------------------------------------------------------
      // Message dispatch functions
      // ----------------------------------------------------------------------

      //! Called in the message loop to dispatch a message from the queue
      virtual MsgDispatchStatus doDispatch();

    PRIVATE:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port schedIn
      static void m_p_schedIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    PRIVATE:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port schedIn
      Svc::InputSchedPort m_schedIn_InputPort[NUM_SCHEDIN_INPUT_PORTS];

  };

}

#endif
